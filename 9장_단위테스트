# 9장 단위 테스트

## 9.1 TDD 법칙 세 가지
* 세가지 법칙
```
- 첫째 법칙: 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.
- 둘째 법칙: 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.
- 셋째 법칙: 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.
```

## 9.2 깨끗한 테스트 코드 유지하기
* 테스트 코드는 실제 코드 못지 않게 중요하다. 테스트 코드는 이류 시민이 아니다. 테스트 코드는 사고와 설계와 주의가 필요하다. 실제 코드 못지 않게 깨끗하게 짜야 한다.

* 테스트는 유연성, 유지보수성, 재사용성을 제공한다.\
실제 코드를 점검하는 자동화된 단위 테스트 슈트는 설계와 아키텍처를 최대한 깨끗하게 보존하는 열쇠다. 테스트는 유연성, 유지보수성, 재사용성을 제공한다. 테스트 케이스가 있으면 변경이 쉬워지기 때문이다.

## 9.3 깨끗한 테스트 코드
* 깨끗한 테스트 코드를 만들려면 세가지가 필요하다. 가독성, 가독성, 가독성!!!

* 테스트 코드는 본론에 돌입해 진짜 필요한 자료 유형과 함수만 사용한다. 그러므로 코드를 읽는 사람은 온갖 잡다하고 세세한 코드에 주눅들고 헷갈릴 필요 없이 코드가 수행하는 기능을 재빨리 이해한다.

* 도메인에 특화된 테스트 언어\
흔히 쓰는 시스템 조작 API를 사용하는 대신 API 위에다 함수와 유틸리티를 구현한 후 그 함수와 유틸리티를 사용하므로 테스트 코드를 짜기도 읽기도 쉬워진다.

* 이중 표준\
테스트 API코드에 적용하는 표준은 실제 코드에 적용하는 표준과 확실히 다르다. 테스트 코드는 단순하고, 간결하고, 표현력이 풍부해야 하지만, 실제 코드만큼 효율적일 필요는 없다. 실제 환경이 아니라 테스트 환경에서 돌아가는 코드이기 때문이다.

```java
//환경제어 시스템에 속한 테스트 코드로 '온도가 급격하게 떨어지면' 경보, 온풍기, 송풍기가 모두 가동되는지 확인하는 코드다
//assertTrue, assertFalse가 많아 테스트 코드를 읽기가 어렵다.
@Test
public void turnOnLoTempAlarmAtThreashold() throws Exception() {
    hw.setTemp(WAY_TOO_COLD);
    controller.tic();
    assertTrue(hw.heaterState());
    assertTrue(hw.blowerState());
    assertFalse(hw.coolerState());
    assertFalse(hw.hiTempState());
    assertTrue(hw.loTempState());
}
```
```java
//대문자는 '켜짐', 소문자는 '꺼짐'을 뜻하고 문자는 항상 heater, blower, cooler, hi-temp-alarm, lo-temp-alarm 순서다
@Test
public void turnOnLoTempAlarmAtThreashold() throws Exception() {
    wayTooCold();
    assertEquals("HBchL", hw.getState());
}
```
```java
//문자열을  따라 움직이며 결과를 재빨리 판단하여 테스트 코드를 이해하기 너무도 쉽다.
@Test
public void turnOnCoolerAndBlowerIfTooHot() throws Exception() {
    tooHot();
    assertEquals("HBchL", hw.getState());
}

@Test
public void turnOnHeaterAndBlowerIfTooCold() throws Exception() {
    tooCold();
    assertEquals("HBchL", hw.getState());
}

@Test
public void turnOnHiTempAlarmAtThreashold() throws Exception() {
    wayTooHot();
    assertEquals("HBchL", hw.getState());
}

@Test
public void turnOnLoTempAlarmAtThreashold() throws Exception() {
    wayTooCold();
    assertEquals("HBchL", hw.getState());
}
```

```java
//효율을 높이려면 StringBuffer가 적합하지만 테스트 환경은 자원이 제한적일 가능성이 낮기 때문에 전혀 문제가 없다.
public String getState() {
    String state = "";
    state += heater ? "H" : "h";
    state += blower ? "B" : "b";
    state += cooler ? "C" : "c";
    state += hiTempAlarm ? "H" : "h";
    state += loTempAlarm ? "L" : "l";
}
```

## 9.4 테스트 당 assert 하나
* JUnit으로 테스트 코드를 짤 때는 함수마다 assert 문 개수는 최대한 줄여서 작성하자.

* 테스트 당 개념 하나\
개념 당 assert 문 수를 최소로 줄이고 테스트 함수 하나는 개념하나만 테스트하라

## 9.5 F.I.R.S.T

* F(Fast) 빠르게\
테스트는 빨라야 한다. 테스트가 느리면 자주 돌릴 엄두를 못 낸다. 자주 돌리지 않으면 초반에 문제를 찾아내 고치지 못한다. 결국 코드 품질이 망가지기 시작한다.

* I(Independent) 독립적으로\
각 테스트는 서로 의존하면 안된다. 테스트가 서로 의존하면 하나가 실패할때 나머지도 잇달아 실패하므로 원인을 진단하기 어려워지고 후반 테스트가 찾아내야 할 결함이 숨겨진다.

* R(Repeatable) 반복가능하게\
테스트는 어떤 환경에서도 반복 가능해야 한다. 실제 환경, QA환경등 모든 환경에서 실행할 수 있어야 한다. 테스트가 돌아가지 않는 환경이 하나라도 있으면 테스트가 실패한 이유를 둘러댈 변명이 생긴다

* S(Self-Validating) 자가검증\
자가검증하는 테스트는 boolean값으로 결과를 내야 한다. 성공 아니면 실패다. 통과 여부를 알려고 로그 파일을 읽게 만들어서는 안된다.

* T(Timely) 적시에\
테스트는 적시에 작성해야 한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다. 실제 코드를 구현한 다음에 테스트 코드를 만들면 실제 코드가 테스트하기 어렵다는 사실을 발견할지도 모른다. 또한 테스트가 불가능하도록 실제 코드를 설계할지도 모른다.

결론
---
TDD를 공부하자


